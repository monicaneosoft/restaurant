{
  "version": 3,
  "file": "zxing-ngx-scanner.js",
  "sources": [
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/zxing-scanner.module.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/zxing-scanner.component.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/browser-multi-format-reader.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/browser-code-reader.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { ZXingScannerComponent } from './zxing-scanner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [ZXingScannerComponent],\n  exports: [ZXingScannerComponent],\n})\nexport class ZXingScannerModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ZXingScannerModule\n    };\n  }\n}\n",
    "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\n\nimport { Result, DecodeHintType, BarcodeFormat } from '@zxing/library';\n\nimport { BrowserMultiFormatReader } from './browser-multi-format-reader';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'zxing-scanner',\n  template: `<video #preview [style.object-fit]=\"previewFitMode\">\n  <p>\n    Your browser does not support this feature, please try to upgrade it.\n  </p>\n  <p>\n    Seu navegador não suporta este recurso, por favor tente atualizá-lo.\n  </p>\n</video>\n`,\n  styles: [`:host{display:block}video{width:100%;height:auto;-o-object-fit:contain;object-fit:contain}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy, OnChanges {\n\n  /**\n   * Supported Hints map.\n   */\n  private _hints: Map<DecodeHintType, any>;\n\n  /**\n   * The ZXing code reader.\n   */\n  private codeReader: BrowserMultiFormatReader;\n\n  /**\n   * Has `navigator` access.\n   */\n  private hasNavigator: boolean;\n\n  /**\n   * Says if some native API is supported.\n   */\n  private isMediaDevicesSuported: boolean;\n\n  /**\n   * Says if some native API is supported.\n   */\n  private isEnumerateDevicesSuported: boolean;\n\n  /**\n   * List of enable video-input devices.\n   */\n  private videoInputDevices: MediaDeviceInfo[];\n\n  /**\n   * The current device used to scan things.\n   */\n  private videoInputDevice: MediaDeviceInfo;\n\n  /**\n   * If the user-agent allowed the use of the camera or not.\n   */\n  private hasPermission: boolean;\n\n  /**\n   * If any media device were found.\n   */\n  private set _hasDevices(hasDevice: boolean) {\n    this.hasDevices.next(hasDevice);\n  }\n\n  /**\n   * Reference to the preview element, should be the `video` tag.\n   */\n  @ViewChild('preview')\n  previewElemRef: ElementRef;\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  scannerEnabled = true;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  @Input()\n  device: MediaDeviceInfo;\n\n  /**\n   * Enable or disable autofocus of the camera (might have an impact on performance)\n   */\n  @Input()\n  autofocusEnabled = true;\n\n  /**\n   * How the preview element shoud be fit inside the :host container.\n   */\n  @Input()\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\n\n  /**\n   * Emitts events when the torch compatibility is changed.\n   */\n  @Output()\n  torchCompatible = new EventEmitter<boolean>();\n\n  /**\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\n   */\n  @Output()\n  scanSuccess = new EventEmitter<string>();\n\n  /**\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\n   */\n  @Output()\n  scanFailure = new EventEmitter<void>();\n\n  /**\n   * Emitts events when a scan throws some error, will inject the error to the callback.\n   */\n  @Output()\n  scanError = new EventEmitter<Error>();\n\n  /**\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\n   */\n  @Output()\n  scanComplete = new EventEmitter<Result>();\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasFound = new EventEmitter<MediaDeviceInfo[]>();\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasNotFound = new EventEmitter<any>();\n\n  /**\n   * Emitts events when the users answers for permission.\n   */\n  @Output()\n  permissionResponse = new EventEmitter<boolean>();\n\n  /**\n   * Emitts events when has devices status is update.\n   */\n  @Output()\n  hasDevices = new EventEmitter<boolean>();\n\n  /**\n   * Returns all the registered formats.\n   */\n  get formats(): BarcodeFormat[] {\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\n  }\n\n  /**\n   * Registers formats the scanner should support.\n   *\n   * @param input BarcodeFormat or case-insensitive string array.\n   */\n  @Input()\n  set formats(input: BarcodeFormat[]) {\n\n    if (typeof input === 'string') {\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\n    }\n\n    // formats may be set from html template as BarcodeFormat or string array\n    const formats = input.map(f => this.getBarcodeFormat(f));\n\n    // updates the hints\n    this.hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n\n    // new instance with new hints.\n    this.refreshCodeReader();\n  }\n\n  /**\n   * Returns all the registered hints.\n   */\n  get hints() {\n    return this._hints;\n  }\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  set torch(on: boolean) {\n    this.codeReader.setTorch(on);\n  }\n\n  /**\n   * If is `tryHarder` enabled.\n   */\n  get tryHarder(): boolean {\n    return this.hints.get(DecodeHintType.TRY_HARDER);\n  }\n\n  /**\n   * Enable/disable tryHarder hint.\n   */\n  @Input()\n  set tryHarder(enable: boolean) {\n    if (enable) {\n      this.hints.set(DecodeHintType.TRY_HARDER, true);\n    } else {\n      this.hints.delete(DecodeHintType.TRY_HARDER);\n    }\n\n    // new instance with new hints.\n    this.refreshCodeReader();\n  }\n\n  /**\n   * Constructor to build the object and do some DI.\n   */\n  constructor() {\n    this._hints = new Map<DecodeHintType, any>();\n    this.hasNavigator = typeof navigator !== 'undefined';\n    this.isMediaDevicesSuported = this.hasNavigator && !!navigator.mediaDevices;\n    this.isEnumerateDevicesSuported = !!(this.isMediaDevicesSuported && navigator.mediaDevices.enumerateDevices);\n\n    // will start codeReader if needed.\n    this.formats = [BarcodeFormat.QR_CODE];\n  }\n\n  /**\n   * Manages the bindinded property changes.\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n\n    if (changes.scannerEnabled) {\n      if (!this.scannerEnabled) {\n        this.resetCodeReader();\n      } else if (this.videoInputDevice) {\n        this.scan(this.videoInputDevice.deviceId);\n      }\n    }\n\n    if (changes.device) {\n      if (this.device) {\n        this.changeDevice(this.device);\n      } else {\n        console.warn('zxing-scanner', 'device', 'Unselected device.');\n        this.resetCodeReader();\n      }\n    }\n  }\n\n  /**\n   * Executed after the view initialization.\n   */\n  async ngAfterViewInit(): Promise<void> {\n\n    // Chrome 63 fix\n    if (!this.previewElemRef) {\n      console.warn('zxing-scanner', 'Preview element not found!');\n      return;\n    }\n\n    // iOS 11 Fix\n    this.previewElemRef.nativeElement.setAttribute('autoplay', false);\n    this.previewElemRef.nativeElement.setAttribute('muted', true);\n    this.previewElemRef.nativeElement.setAttribute('playsinline', true);\n    this.previewElemRef.nativeElement.setAttribute('autofocus', this.autofocusEnabled);\n\n    // Asks for permission before enumerating devices so it can get all the device's info\n    const hasPermission = await this.askForPermission();\n\n    // gets and enumerates all video devices\n    this.enumarateVideoDevices().then((videoInputDevices: MediaDeviceInfo[]) => {\n\n      if (videoInputDevices && videoInputDevices.length > 0) {\n        this._hasDevices = true;\n        this.camerasFound.next(videoInputDevices);\n      } else {\n        this._hasDevices = false;\n        this.camerasNotFound.next();\n      }\n\n    });\n\n    // There's nothin' to do anymore if we don't have permissions.\n    if (hasPermission !== true) {\n      return;\n    }\n\n    this.startScan(this.videoInputDevice);\n\n    this.codeReader.torchAvailable.subscribe((value: boolean) => {\n      this.torchCompatible.emit(value);\n    });\n  }\n\n  /**\n   * Executes some actions before destroy the component.\n   */\n  ngOnDestroy(): void {\n    this.resetCodeReader();\n  }\n\n  /**\n   * Properly changes the current target device.\n   *\n   * @param device\n   */\n  changeDevice(device: MediaDeviceInfo): void {\n    this.resetCodeReader();\n    this.videoInputDevice = device;\n    this.startScan(device);\n  }\n\n  /**\n   * Properly changes the current target device using it's deviceId.\n   *\n   * @param deviceId\n   */\n  changeDeviceById(deviceId: string): void {\n    this.changeDevice(this.getDeviceById(deviceId));\n  }\n\n  /**\n   * Properly returns the target device using it's deviceId.\n   *\n   * @param deviceId\n   */\n  getDeviceById(deviceId: string): MediaDeviceInfo {\n    return this.videoInputDevices.find(device => device.deviceId === deviceId);\n  }\n\n  /**\n   * Sets the permission value and emmits the event.\n   */\n  private setPermission(hasPermission: boolean | null) {\n    this.hasPermission = hasPermission;\n    this.permissionResponse.next(hasPermission);\n    return this.permissionResponse;\n  }\n\n  /**\n   * Gets and registers all cammeras.\n   *\n   * @todo Return a Promise.\n   */\n  async askForPermission(): Promise<boolean> {\n\n    if (!this.hasNavigator) {\n      console.error('zxing-scanner', 'askForPermission', 'Can\\'t ask permission, navigator is not present.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    if (!this.isMediaDevicesSuported) {\n      console.error('zxing-scanner', 'askForPermission', 'Can\\'t get user media, this is not supported.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    let stream: MediaStream;\n\n    try {\n      // Will try to ask for permission\n      stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n    } catch (err) {\n      return this.handlePermissionException(err);\n    }\n\n    let permission: boolean;\n\n    try {\n\n      // Start stream so Browser can display its permission-dialog\n      this.codeReader.bindVideoSrc(this.previewElemRef.nativeElement, stream);\n\n      // After permission was granted, we can stop it again\n      stream.getVideoTracks().forEach(track => {\n        track.stop();\n      });\n\n      // should stop the opened stream\n      this.codeReader.unbindVideoSrc(this.previewElemRef.nativeElement);\n\n      // if the scripts lives until here, that's only one mean:\n\n      // permission granted\n      permission = true;\n      this.setPermission(permission);\n\n    } catch (err) {\n\n      console.error('zxing-scanner', 'askForPermission', err);\n\n      // permission aborted\n      permission = null;\n      this.setPermission(permission);\n    }\n\n    // Returns the event emitter, so the dev can subscribe to it\n    return permission;\n  }\n\n  /**\n   * Returns the filtered permission.\n   *\n   * @param err\n   */\n  private handlePermissionException(err: DOMException): boolean {\n\n    // failed to grant permission to video input\n\n    console.warn('zxing-scanner', 'askForPermission', err);\n\n    let permission: boolean;\n\n    switch (err.name) {\n\n      // usually caused by not secure origins\n      case 'NotSupportedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // could not claim\n        permission = null;\n        // can't check devices\n        this._hasDevices = null;\n        break;\n\n      // user denied permission\n      case 'NotAllowedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // claimed and denied permission\n        permission = false;\n        // this means that input devices exists\n        this._hasDevices = true;\n        break;\n\n      // the device has no attached input devices\n      case 'NotFoundError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // no permissions claimed\n        permission = null;\n        // because there was no devices\n        this._hasDevices = false;\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      case 'NotReadableError':\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\n        // no permissions claimed\n        permission = null;\n        // there are devices, which I couldn't use\n        this._hasDevices = false;\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      default:\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\n        // unknown\n        permission = null;\n        // this._hasDevices = undefined;\n        break;\n\n    }\n\n    this.setPermission(permission);\n\n    // tells the listener about the error\n    this.permissionResponse.error(err);\n\n    return permission;\n  }\n\n  /**\n   * Starts the continuous scanning for the given device.\n   *\n   * @param deviceId The deviceId from the device.\n   */\n  scan(deviceId: string): void {\n    try {\n\n      this.codeReader.decodeFromInputVideoDevice((result: Result) => {\n\n        if (result) {\n          this.dispatchScanSuccess(result);\n        } else {\n          this.dispatchScanFailure();\n        }\n\n        this.dispatchScanComplete(result);\n\n      }, deviceId, this.previewElemRef.nativeElement);\n\n    } catch (err) {\n      this.dispatchScanError(err);\n      this.dispatchScanComplete(undefined);\n    }\n  }\n\n  /**\n   * Starts scanning if allowed.\n   *\n   * @param device The device to be used in the scan.\n   */\n  startScan(device: MediaDeviceInfo): void {\n    if (this.scannerEnabled && device) {\n      this.scan(device.deviceId);\n    }\n  }\n\n  /**\n   * Stops the scan service.\n   */\n  resetCodeReader(): void {\n    if (this.codeReader) {\n      this.codeReader.reset();\n    }\n  }\n\n  /**\n   * Stops and starts back the scan.\n   */\n  restartScan(): void {\n    this.resetCodeReader();\n    this.startScan(this.device);\n  }\n\n  /**\n   * Stops old `codeReader` and starts scanning in a new one.\n   */\n  refreshCodeReader(): void {\n    this.resetCodeReader();\n    this.codeReader = new BrowserMultiFormatReader(this.hints);\n    this.startScan(this.device);\n  }\n\n  /**\n   * Dispatches the scan success event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanSuccess(result: Result): void {\n    this.scanSuccess.next(result.getText());\n  }\n\n  /**\n   * Dispatches the scan failure event.\n   */\n  private dispatchScanFailure(): void {\n    this.scanFailure.next();\n  }\n\n  /**\n   * Dispatches the scan error event.\n   *\n   * @param err the error thing.\n   */\n  private dispatchScanError(error: any): void {\n    this.scanError.next(error);\n  }\n\n  /**\n   * Dispatches the scan event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanComplete(result: Result): void {\n    this.scanComplete.next(result);\n  }\n\n  /**\n   * Enumerates all the available devices.\n   */\n  private async enumarateVideoDevices(): Promise<MediaDeviceInfo[]> {\n\n    if (!this.hasNavigator) {\n      console.error('zxing-scanner', 'enumarateVideoDevices', 'Can\\'t enumerate devices, navigator is not present.');\n      return;\n    }\n\n    if (!this.isEnumerateDevicesSuported) {\n      console.error('zxing-scanner', 'enumarateVideoDevices', 'Can\\'t enumerate devices, method not supported.');\n      return;\n    }\n\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    this.videoInputDevices = [];\n\n    for (const device of devices) {\n\n      // @todo type this as `MediaDeviceInfo`\n      const videoDevice: any = {};\n\n      // tslint:disable-next-line:forin\n      for (const key in device) {\n        videoDevice[key] = device[key];\n      }\n\n      if (videoDevice.kind === 'video') {\n        videoDevice.kind = 'videoinput';\n      }\n\n      if (!videoDevice.deviceId) {\n        videoDevice.deviceId = (<any>videoDevice).id;\n      }\n\n      if (!videoDevice.label) {\n        videoDevice.label = 'Camera (no permission 🚫)';\n      }\n\n      if (videoDevice.kind === 'videoinput') {\n        this.videoInputDevices.push(videoDevice);\n      }\n    }\n\n    return this.videoInputDevices;\n  }\n\n  /**\n   * Returns a valid BarcodeFormat or fails.\n   */\n  private getBarcodeFormat(format: string | BarcodeFormat): BarcodeFormat {\n    return typeof format === 'string'\n      ? BarcodeFormat[format.trim().toUpperCase()]\n      : format;\n  }\n}\n",
    "import { MultiFormatReader, DecodeHintType, BinaryBitmap, Result } from '@zxing/library';\n\nimport { BrowserCodeReader } from './browser-code-reader';\n\nexport class BrowserMultiFormatReader extends BrowserCodeReader {\n\n  protected readonly reader: MultiFormatReader;\n\n  public constructor(\n    hints: Map<DecodeHintType, any> = null,\n    timeBetweenScansMillis: number = 500\n  ) {\n    const reader = new MultiFormatReader();\n    reader.setHints(hints);\n    super(reader, timeBetweenScansMillis);\n  }\n\n  /**\n   * Overwrite decodeBitmap to call decodeWithState, which will pay\n   * attention to the hints set in the constructor function\n   */\n  protected decodeBitmap(binaryBitmap: BinaryBitmap): Result {\n    return this.reader.decodeWithState(binaryBitmap);\n  }\n}\n",
    "/// <reference path=\"./image-capture.d.ts\" />\n\nimport {\n  BinaryBitmap,\n  ChecksumException,\n  Exception,\n  FormatException,\n  HTMLCanvasElementLuminanceSource,\n  HybridBinarizer,\n  NotFoundException,\n  Reader,\n  Result,\n} from '@zxing/library';\n\nimport {\n  BehaviorSubject,\n  Observable,\n  Subscriber,\n  Subscription\n} from 'rxjs';\n\nimport { catchError } from 'rxjs/operators';\n\n/**\n * Based on zxing-typescript BrowserCodeReader\n */\nexport class BrowserCodeReader {\n\n  /**\n   * The HTML video element, used to display the camera stream.\n   */\n  private videoElement: HTMLVideoElement;\n  /**\n   * Should contain the current registered listener for video play-ended,\n   * used to unregister that listener when needed.\n   */\n  private videoPlayEndedEventListener: EventListener;\n  /**\n   * Should contain the current registered listener for video playing,\n   * used to unregister that listener when needed.\n   */\n  private videoPlayingEventListener: EventListener;\n  /**\n   * Should contain the current registered listener for video loaded-metadata,\n   * used to unregister that listener when needed.\n   */\n  private videoLoadedMetadataEventListener: EventListener;\n\n  /**\n   * The HTML image element, used as a fallback for the video element when decoding.\n   */\n  private imageElement: HTMLImageElement;\n  /**\n   * Should contain the current registered listener for image loading,\n   * used to unregister that listener when needed.\n   */\n  private imageLoadedEventListener: EventListener;\n\n  /**\n   * The HTML canvas element, used to draw the video or image's frame for decoding.\n   */\n  private canvasElement: HTMLCanvasElement;\n  /**\n   * The HTML canvas element context.\n   */\n  private canvasElementContext: CanvasRenderingContext2D;\n\n  /**\n   * Used to control the decoding stream when it's open.\n   */\n  private decodingStream: Subscription;\n\n  /**\n   * The stream output from camera.\n   */\n  private stream: MediaStream;\n  /**\n   * The track from camera.\n   */\n  private track: MediaStreamTrack;\n  /**\n   * Shows if torch is available on the camera.\n   */\n  private torchCompatible = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The device id of the current media device.\n   */\n  private deviceId: string;\n\n  /**\n   * Constructor for dependency injection.\n   *\n   * @param reader The barcode reader to be used to decode the stream.\n   * @param timeBetweenScans The scan throttling in milliseconds.\n   */\n  public constructor(protected readonly reader: Reader, private timeBetweenScans: number = 500) { }\n\n  /**\n   * Starts the decoding from the current or a new video element.\n   *\n   * @param callbackFn The callback to be executed after every scan attempt\n   * @param deviceId The device's to be used Id\n   * @param videoElement A new video element\n   *\n   * @todo Return Promise<Result>\n   */\n  public async decodeFromInputVideoDevice(\n    callbackFn?: (result: Result) => any,\n    deviceId?: string,\n    videoElement?: HTMLVideoElement\n  ): Promise<void> {\n\n    this.reset();\n\n    this.prepareVideoElement(videoElement);\n\n    // Keeps the deviceId between scanner resets.\n    if (typeof deviceId !== 'undefined') {\n      this.deviceId = deviceId;\n    }\n\n    const video = typeof deviceId === 'undefined'\n      ? { facingMode: { exact: 'environment' } }\n      : { deviceId: { exact: deviceId } };\n\n    const constraints: MediaStreamConstraints = {\n      audio: false,\n      video\n    };\n\n    if (typeof navigator === 'undefined') {\n      return;\n    }\n\n    try {\n      const stream = await navigator\n        .mediaDevices\n        .getUserMedia(constraints);\n\n      this.startDecodeFromStream(stream, callbackFn);\n\n    } catch (err) {\n      /* handle the error, or not */\n      console.error(err);\n    }\n  }\n\n  /**\n   * Sets the new stream and request a new decoding-with-delay.\n   *\n   * @param stream The stream to be shown in the video element.\n   * @param callbackFn A callback for the decode method.\n   *\n   * @todo Return Promise<Result>\n   */\n  private startDecodeFromStream(stream: MediaStream, callbackFn?: (result: Result) => any): void {\n    this.stream = stream;\n    this.checkTorchCompatibility(this.stream);\n    this.bindVideoSrc(this.videoElement, this.stream);\n    this.bindEvents(this.videoElement, callbackFn);\n  }\n\n  /**\n   * Defines what the videoElement src will be.\n   *\n   * @param videoElement\n   * @param stream\n   */\n  public bindVideoSrc(videoElement: HTMLVideoElement, stream: MediaStream): void {\n    // Older browsers may not have `srcObject`\n    try {\n      // @NOTE Throws Exception if interrupted by a new loaded request\n      videoElement.srcObject = stream;\n    } catch (err) {\n      // @NOTE Avoid using this in new browsers, as it is going away.\n      videoElement.src = window.URL.createObjectURL(stream);\n    }\n  }\n\n  /**\n   * Unbinds a HTML video src property.\n   *\n   * @param videoElement\n   */\n  public unbindVideoSrc(videoElement: HTMLVideoElement): void {\n    try {\n      videoElement.srcObject = null;\n    } catch (err) {\n      videoElement.src = '';\n    }\n  }\n\n  /**\n   * Binds listeners and callbacks to the videoElement.\n   *\n   * @param videoElement\n   * @param callbackFn\n   */\n  private bindEvents(videoElement: HTMLVideoElement, callbackFn?: (result: Result) => any): void {\n\n    if (typeof callbackFn !== 'undefined') {\n      this.videoPlayingEventListener = () => this.decodingStream = this.decodeWithDelay(this.timeBetweenScans)\n        .pipe(catchError((e, x) => this.handleDecodeStreamError(e, x)))\n        .subscribe((x: Result) => callbackFn(x));\n    }\n\n    videoElement.addEventListener('playing', this.videoPlayingEventListener);\n\n    this.videoLoadedMetadataEventListener = () => videoElement.play();\n\n    videoElement.addEventListener('loadedmetadata', this.videoLoadedMetadataEventListener);\n  }\n\n  /**\n   * Checks if the stream supports torch control.\n   *\n   * @param stream The media stream used to check.\n   */\n  private async checkTorchCompatibility(stream: MediaStream): Promise<void> {\n    try {\n      this.track = stream.getVideoTracks()[0];\n      const imageCapture = new ImageCapture(this.track);\n      const capabilities = await imageCapture.getPhotoCapabilities();\n      const compatible = !!capabilities.torch || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\n      this.torchCompatible.next(compatible);\n    } catch (err) {\n      this.torchCompatible.next(false);\n    }\n  }\n\n  /**\n   * Enables and disables the device torch.\n   */\n  public setTorch(on: boolean): void {\n    if (!this.torchCompatible.value) {\n      return;\n    }\n    if (on) {\n      this.track.applyConstraints({\n        advanced: [<any>{ torch: true }]\n      });\n    } else {\n      this.restart();\n    }\n  }\n\n  /**\n   * Observable that says if there's a torch available for the current device.\n   */\n  public get torchAvailable(): Observable<boolean> {\n    return this.torchCompatible.asObservable();\n  }\n\n  /**\n   * Sets a HTMLVideoElement for scanning or creates a new one.\n   *\n   * @param videoElement The HTMLVideoElement to be set.\n   */\n  private prepareVideoElement(videoElement?: HTMLVideoElement): void {\n\n    if (!videoElement && typeof document !== 'undefined') {\n      videoElement = document.createElement('video');\n      videoElement.width = 200;\n      videoElement.height = 200;\n    }\n\n    this.videoElement = videoElement;\n  }\n\n  /**\n   * Opens a decoding stream.\n   */\n  private decodeWithDelay(delay: number = 500): Observable<Result> {\n    // The decoding stream.\n    return Observable.create((observer: Subscriber<Result>) => {\n      // Creates on Subscribe.\n      const intervalId = setInterval(() => {\n        try {\n          observer.next(this.decode());\n        } catch (err) {\n          observer.error(err);\n        }\n      }, delay);\n      // Destroys on Unsubscribe.\n      return () => clearInterval(intervalId);\n    });\n  }\n\n  /**\n   * Gets the BinaryBitmap for ya! (and decodes it)\n   */\n  private decode(): Result {\n\n    // get binary bitmap for decode function\n    const binaryBitmap = this.createBinaryBitmap(this.videoElement || this.imageElement);\n\n    return this.decodeBitmap(binaryBitmap);\n  }\n\n  /**\n   * Call the encapsulated readers decode\n   */\n  protected decodeBitmap(binaryBitmap: BinaryBitmap): Result {\n    return this.reader.decode(binaryBitmap);\n  }\n\n  /**\n   * Administra um erro gerado durante o decode stream.\n   */\n  private handleDecodeStreamError(err: Exception, caught: Observable<Result>): Observable<Result> {\n\n    if (\n      // scan Failure - found nothing, no error\n      err instanceof NotFoundException ||\n      // scan Error - found the QR but got error on decoding\n      err instanceof ChecksumException ||\n      err instanceof FormatException\n    ) {\n      return caught;\n    }\n\n    throw err;\n  }\n\n  /**\n   * Creates a binaryBitmap based in some image source.\n   *\n   * @param mediaElement HTML element containing drawable image source.\n   */\n  private createBinaryBitmap(mediaElement: HTMLVideoElement | HTMLImageElement): BinaryBitmap {\n\n    if (undefined === this.canvasElementContext) {\n      this.prepareCaptureCanvas();\n    }\n\n    this.canvasElementContext.drawImage(mediaElement, 0, 0);\n\n    const luminanceSource = new HTMLCanvasElementLuminanceSource(this.canvasElement);\n    const hybridBinarizer = new HybridBinarizer(luminanceSource);\n\n    return new BinaryBitmap(hybridBinarizer);\n  }\n\n  /**\n   * 🖌 Prepares the canvas for capture and scan frames.\n   */\n  private prepareCaptureCanvas(): void {\n\n    if (typeof document === 'undefined') {\n\n      this.canvasElement = undefined;\n      this.canvasElementContext = undefined;\n\n      return;\n    }\n\n    const canvasElement = document.createElement('canvas');\n\n    let width: number;\n    let height: number;\n\n    if (typeof this.videoElement !== 'undefined') {\n      width = this.videoElement.videoWidth;\n      height = this.videoElement.videoHeight;\n    }\n\n    if (typeof this.imageElement !== 'undefined') {\n      width = this.imageElement.naturalWidth || this.imageElement.width;\n      height = this.imageElement.naturalHeight || this.imageElement.height;\n    }\n\n    canvasElement.style.width = width + 'px';\n    canvasElement.style.height = height + 'px';\n    canvasElement.width = width;\n    canvasElement.height = height;\n\n    this.canvasElement = canvasElement;\n    this.canvasElementContext = canvasElement.getContext('2d');\n  }\n\n  /**\n   * Stops the continuous scan and cleans the stream.\n   */\n  private stop(): void {\n\n    if (this.decodingStream) {\n      this.decodingStream.unsubscribe();\n    }\n\n    if (this.stream) {\n      this.stream.getVideoTracks().forEach(t => t.stop());\n      this.stream = undefined;\n    }\n\n  }\n\n  /**\n   * Resets the scanner and it's configurations.\n   */\n  public reset(): void {\n\n    // stops the camera, preview and scan 🔴\n\n    this.stop();\n\n    if (this.videoElement) {\n\n      // first gives freedon to the element 🕊\n\n      if (typeof this.videoPlayEndedEventListener !== 'undefined') {\n        this.videoElement.removeEventListener('ended', this.videoPlayEndedEventListener);\n      }\n\n      if (typeof this.videoPlayingEventListener !== 'undefined') {\n        this.videoElement.removeEventListener('playing', this.videoPlayingEventListener);\n      }\n\n      if (typeof this.videoLoadedMetadataEventListener !== 'undefined') {\n        this.videoElement.removeEventListener('loadedmetadata', this.videoLoadedMetadataEventListener);\n      }\n\n      // then forgets about that element 😢\n\n      this.unbindVideoSrc(this.videoElement);\n\n      this.videoElement.removeAttribute('src');\n      this.videoElement = undefined;\n    }\n\n    if (this.imageElement) {\n\n      // first gives freedon to the element 🕊\n\n      if (undefined !== this.videoPlayEndedEventListener) {\n        this.imageElement.removeEventListener('load', this.imageLoadedEventListener);\n      }\n\n      // then forgets about that element 😢\n\n      this.imageElement.src = undefined;\n      this.imageElement.removeAttribute('src');\n      this.imageElement = undefined;\n    }\n\n    // cleans canvas references 🖌\n\n    this.canvasElementContext = undefined;\n    this.canvasElement = undefined;\n  }\n\n  /**\n   * Restarts the scanner.\n   */\n  private restart(): void {\n    // reset\n    // start\n    this.decodeFromInputVideoDevice(undefined, this.deviceId, this.videoElement);\n  }\n}\n"
  ],
  "names": [
    "tslib_1.__values",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
